const int motionSensor = 4;
const int buzzer = 8;
const int soilmoistureSensor = A0;
const int motionSensor2 = 2;

int redLed = 13;
int blueLed = 11;
const int ledGreen = PB2;

uint8_t motionState, motionState2 = 0;
int SoilMoistureValue = 0;

const int soilMoistureThreshold = 500;

uint8_t premotion, premotion1, premotion2 = 0;

const uint16_t timer = 0;      // counter 
const uint16_t compare = 31250; // compare thresholds

void setup() {

  Serial.begin(9600);

  pinMode(redLed, OUTPUT); //will be used to send signals 
  pinMode(buzzer, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(soilmoistureSensor, INPUT_PULLUP);
  pinMode(motionSensor, INPUT);
  pinMode(motionSensor2, INPUT);
  DDRB |= (1 << ledGreen);

  PCICR |= 0b00000111; // Pin Change Interrupt Control Register
  PCMSK2 |= 0b10011100;

  TCCR1A = 0;
  TCCR1B |= (1 << CS12);
  TCCR1B &= ~(1 << CS11);
  TCCR1B &= ~(1 << CS10);

  TCNT1 = timer;
  OCR1A = compare;

  TIMSK1 = (1 << OCIE1A);
  sei();

}

// infinite loop
void loop() {
  
  if (premotion != motionState) {
    digitalWrite(buzzer, motionState);
    Serial.println("Motion Sensor 1 Interrupt - buzzer will beep");
    premotion = motionState;
  }

  if (premotion1 != motionState2) {
    digitalWrite(blueLed, motionState2);
    Serial.println("Motion Sensor 2 Interrupt - Turned blue LED");
    premotion1 = motionState2;
  }
  
  SoilMoistureValue = analogRead(soilmoistureSensor);
  Serial.print("Soil Moisture: ");
  Serial.println(SoilMoistureValue);
 

  if (SoilMoistureValue > soilMoistureThreshold) {
    digitalWrite(redLed, HIGH);
    Serial.println("Warning: Soil is too dry!");
  } else {
    digitalWrite(redLed, LOW);
  }
  delay(1000);
}

ISR(PCINT2_vect) {
  motionState = PIND & B00010000;
  motionState2 = PIND & B00000100;
}

ISR(TIMER1_COMPA_vect) {
  TCNT1 = timer;
  PORTB ^= (1 << ledGreen);
}
